<%- include('../partials/tasks-partials/calendar-header') %>
  <div class="content-container">
    <div id="calendar-month" class="grid-bg-color">
      <!-- Calendar Grid Header -->
      <section class="calendar-month-header">
        <div class="flex-space-between">
          <h1 id="month-label"></h1>
          <div>
            <button id="decrement-month"><i class="fa-solid fa-chevron-left"></i></button>
            <button id="increment-month"><i class="fa-solid fa-chevron-right"></i></button>
          </div>
        </div>
        <div id="selected-month"></div>
        <ol id="days-of-week" class="day-of-week"></ol>
      </section>

      <!-- Calendar Grid -->
      <div id="calendar" class="calendar-grid"></div>
    </div>
    <!-- Legend -->
    <div class="legend-container">
      <div class="flex-row">
        <div class="legend-green"></div>
        <h3>All Tasks Completed</h3>
      </div>
      <div class="flex-row">
        <div class="legend-red"></div>
        <h3>Failed Task(s)</h3>
      </div>
    </div>
  </div>
  <script>
    // Constants
    const MONTHCOUNTS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    const WEEKDAYS = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    const INITIAL_YEAR = new Date().getFullYear();
    const INITIAL_MONTH = new Date().getMonth();
    const PRIOR_MONTH = INITIAL_MONTH - 1;
    const NEXT_MONTH = INITIAL_MONTH + 1;
    const TODAY = <%= dayjs().format('YYYY-MM-D') %>;
    const SUCCESSIDS = <%- JSON.stringify(successDayIds) %>;
    const FAILIDS = <%- JSON.stringify(failDayIds) %>;

    // Calendar State
    let newYear;
    let newMonth;
    let currentMonthIdx;
    let currentMonthDayCount;
    let previousMonthDayCount;
    let nextMonthDayCount;
    let currentMonthDaysArray;
    let previousMonthDaysArray;
    let nextMonthDaysArray;
    let firstWeekdayOfMonth;
    let lastWeekdayOfMonth;
    let previousMonthDaysDisplayed;
    let nextMonthDaysDisplayed;

    // Cached Elements
    const calendarElement = document.getElementById('calendar');
    const daysOfWeekElement = document.getElementById('days-of-week');
    const addMonthBtn = document.getElementById('increment-month');
    const subtractMonthBtn = document.getElementById('decrement-month');
    const monthLabelElement = document.getElementById('month-label');

    // Event Listeners
    document.getElementById('increment-month').addEventListener('click', handleIncrementMonth);
    document.getElementById('decrement-month').addEventListener('click', handleDecrementMonth);

    // Helper Functions
    function getMonthName(monthNumber) {
      const date = new Date();
      date.setMonth(monthNumber - 1);

      return date.toLocaleString('en-US', { month: 'long' });
    }

    function createDayDivs(day) {
      const dayElement = document.createElement('div');
      dayElement.classList.add('grid-panel');
      dayElement.id = `${INITIAL_YEAR}-${day.date}`;
      dayElement.innerText = day.date;
      calendarElement.appendChild(dayElement);
    }

    function createLinks(day) {
      document.getElementById(day.id).innerText = ''
      const linkElement = document.createElement('a');
      linkElement.href = `/tasks/${day.id}`;
      linkElement.innerText = day.date;
      document.getElementById(day.id).appendChild(linkElement);
    }

    function removeAllDayElements() {
      const dayElements = document.querySelectorAll('.grid-panel');
      dayElements.forEach(day => day.remove());
    }

    // Functions
    init();

    WEEKDAYS.forEach(day => {
      const weekDayElement = document.createElement('li');
      daysOfWeekElement.appendChild(weekDayElement);
      weekDayElement.innerText = day;
    });

    function init() {
      newYear = INITIAL_YEAR;
      currentMonthIdx = new Date().getMonth();
      previousMonthDayCount = MONTHCOUNTS[currentMonthIdx - 1];
      currentMonthDayCount = MONTHCOUNTS[currentMonthIdx];
      nextMonthDayCount = MONTHCOUNTS[currentMonthIdx + 1];
      currentMonthDaysArray = [];
      previousMonthDaysArray = [];
      nextMonthDaysArray = [];
      firstWeekdayOfMonth = new Date(INITIAL_YEAR, INITIAL_MONTH, 1).getDay();
      firstWeekdayOfMonth = firstWeekdayOfMonth === 0 ? 7 : firstWeekdayOfMonth;
      lastWeekdayOfMonth = new Date(INITIAL_YEAR, INITIAL_MONTH, currentMonthDayCount).getDay();
      previousMonthDaysDisplayed = firstWeekdayOfMonth - 1;
      nextMonthDaysDisplayed = 7 - lastWeekdayOfMonth;
      render();
    }

    function render() {
      monthLabelElement.innerText = getMonthName(currentMonthIdx + 1) + ' ' + newYear;
      renderPreviousMonthCalendarDays();
      renderCurrentMonthCalendarDays();
      renderNextMonthCalendarDays();
      renderCalendarDayStyles();
    }

    function renderPreviousMonthCalendarDays() {
      const priorMonthIdx = currentMonthIdx === 0 ? 12 : currentMonthIdx;
      previousMonthDaysArray = [...Array(previousMonthDaysDisplayed)].map((day, index) => {
        return {
          dayOfMonth: previousMonthDayCount - index,
          date: `${priorMonthIdx}-${previousMonthDayCount - index}`,
          id: `${newYear}-${priorMonthIdx}-${previousMonthDayCount - index}`,
          isCurrentMonth: false
        }
      });
      previousMonthDaysArray.reverse().forEach(day => createDayDivs(day));
    }
    
    function renderCurrentMonthCalendarDays() {
      currentMonthDaysArray = [...Array(currentMonthDayCount)].map((day, index) => {
        return {
          dayOfMonth: index + 1,
          date: `${currentMonthIdx + 1}-${index + 1}`,
          id: `${newYear}-${currentMonthIdx + 1}-${index + 1}`,
          isCurrentMonth: true,
        }
      });
      currentMonthDaysArray.forEach(day => {
        createDayDivs(day);
        if (SUCCESSIDS.includes(day.id) || FAILIDS.includes(day.id)) createLinks(day);
      });
    }

    function renderNextMonthCalendarDays() {
      const nextMonthIdx = currentMonthIdx === 11 ? 1 : currentMonthIdx + 2;
      nextMonthDaysArray = [...Array(nextMonthDaysDisplayed)].map((day, index) => {
        return {
          dayOfMonth: index + 1,
          date: `${nextMonthIdx}-${index + 1}`,
          id: `${newYear}-${nextMonthIdx}-${index + 1}`,
          isCurrentMonth: false
        }
      });
      nextMonthDaysArray.forEach(day => createDayDivs(day));
    }

    function renderCalendarDayStyles() {
      SUCCESSIDS.forEach(day => {
        const dayDiv = document.getElementById(day);
        if (dayDiv !== null) dayDiv.classList.add('success');
      });

      FAILIDS.forEach(day => {
        const dayDiv = document.getElementById(day);
        if (dayDiv !== null) dayDiv.classList.add('fail');
      });

      const allCalendarDays = [...previousMonthDaysArray, ...currentMonthDaysArray, ...nextMonthDaysArray];
      allCalendarDays.forEach(day => {
        const dayDiv = document.getElementById(day.id);
        if (dayDiv !== null) {
          day.isCurrentMonth ?
            dayDiv.classList.add('current-month')
            :
            dayDiv.classList.add('not-current-month');
        }
      });
    }

    function handleIncrementMonth() {
      currentMonthIdx++;
      previousMonthDayCount = MONTHCOUNTS[currentMonthIdx - 1];
      currentMonthDayCount = MONTHCOUNTS[currentMonthIdx];
      nextMonthDayCount = MONTHCOUNTS[currentMonthIdx + 1];
      currentMonthDaysArray = [];
      previousMonthDaysArray = [];
      nextMonthDaysArray = [];
      if (currentMonthIdx > 11) {
        currentMonthIdx = 0;
        newYear++;
        previousMonthDayCount = MONTHCOUNTS[11];
        currentMonthDayCount = MONTHCOUNTS[0];
        nextMonthDayCount = MONTHCOUNTS[1];
      }
      firstWeekdayOfMonth = new Date(newYear, currentMonthIdx, 1).getDay();
      firstWeekdayOfMonth = firstWeekdayOfMonth === 0 ? 7 : firstWeekdayOfMonth;
      lastWeekdayOfMonth = new Date(newYear, currentMonthIdx, currentMonthDayCount).getDay();
      lastWeekdayOfMonth = lastWeekdayOfMonth === 0 ? 7 : lastWeekdayOfMonth;
      previousMonthDaysDisplayed = firstWeekdayOfMonth - 1;
      nextMonthDaysDisplayed = 7 - lastWeekdayOfMonth;
      removeAllDayElements();
      render();
      console.log([...previousMonthDaysArray, ...currentMonthDaysArray, ...nextMonthDaysArray]);
      console.log('year: ', newYear);
      console.log('month: ', currentMonthIdx);
      console.log('first weekday: ', firstWeekdayOfMonth);
      console.log('last weekday: ', lastWeekdayOfMonth);
      console.log('previous month day count: ', previousMonthDayCount);
      console.log('previous month day array: ', previousMonthDaysArray);
      console.log('previous months days displayed: ', previousMonthDaysDisplayed);
      console.log('next month days displayed: ', nextMonthDaysDisplayed);
      console.log('previous month array: ', previousMonthDaysArray);
      console.log('current month array: ', currentMonthDaysArray);
      console.log('next month array: ', nextMonthDaysArray);
    }

    function handleDecrementMonth() {
      currentMonthIdx--;
      previousMonthDayCount = MONTHCOUNTS[currentMonthIdx - 1];
      currentMonthDayCount = MONTHCOUNTS[currentMonthIdx];
      nextMonthDayCount = MONTHCOUNTS[currentMonthIdx + 1];
      currentMonthDaysArray = [];
      previousMonthDaysArray = [];
      nextMonthDaysArray = [];
      if (currentMonthIdx === 0) {
        previousMonthDayCount = MONTHCOUNTS[11];
      } else if (currentMonthIdx < 0) {
        currentMonthIdx = 11;
        newYear--;
        previousMonthDayCount = MONTHCOUNTS[10];
        currentMonthDayCount = MONTHCOUNTS[11];
        nextMonthDayCount = MONTHCOUNTS[0];
      }
      firstWeekdayOfMonth = new Date(newYear, currentMonthIdx, 1).getDay();
      firstWeekdayOfMonth = firstWeekdayOfMonth === 0 ? 7 : firstWeekdayOfMonth;
      lastWeekdayOfMonth = new Date(newYear, currentMonthIdx, currentMonthDayCount).getDay();
      lastWeekdayOfMonth = lastWeekdayOfMonth === 0 ? 7 : lastWeekdayOfMonth;
      previousMonthDaysDisplayed = firstWeekdayOfMonth - 1;
      nextMonthDaysDisplayed = 7 - lastWeekdayOfMonth;
      removeAllDayElements();
      render();
      console.log([...previousMonthDaysArray, ...currentMonthDaysArray, ...nextMonthDaysArray]);
      console.log('year: ', newYear);
      console.log('month: ', currentMonthIdx);
      console.log('first weekday: ', firstWeekdayOfMonth);
      console.log('last weekday: ', lastWeekdayOfMonth);
      console.log('previous month day count: ', previousMonthDayCount);
      console.log('previous months days displayed: ', previousMonthDaysDisplayed);
      console.log('next month days displayed: ', nextMonthDaysDisplayed);
      console.log('previous month array: ', previousMonthDaysArray);
      console.log('current month array: ', currentMonthDaysArray);
      console.log('next month array: ', nextMonthDaysArray);
      removeAllDayElements();
      render();
    }
  </script>
  <%- include('../partials/footer')%>