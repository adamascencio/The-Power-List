<%- include('../partials/tasks-partials/calendar-header') %>
  <h1><%= getMonthName(month) %> <%= year %></h1>
  <div id="calendar-month" class="grid-bg-color">
    <!-- Calendar Grid Header -->
    <section class="calendar-month-header">
      <div id="selected-month"></div>
      <ol id="days-of-week" class="day-of-week"></ol>
    </section>

    <!-- Calendar Grid -->
    <div id="calendar" class="calendar-grid"></div>
  </div>
  <!-- Legend -->
  <div class="legend-container">
    <div class="flex-row">
      <div class="legend-green"></div>
      <h3>All Tasks Completed</h3>
    </div>
    <div class="flex-row">
      <div class="legend-red"></div>
      <h3>Failed Task(s)</h3>
    </div>
  </div>
  <script>
    // Constants
    const WEEKDAYS = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    const INITIAL_YEAR = <%= year %>;
    const INITIAL_MONTH = <%= month %>;
    const PRIOR_MONTH = <%= dayjs().subtract(1, 'month').format('M') %>;
    const NEXT_MONTH = <%= dayjs().add(1, 'month').format('M') %>;
    const TODAY = <%= dayjs().format('YYYY-MM-DD') %>;
    const SUCCESSIDS = <%- JSON.stringify(successDayIds) %>;
    const FAILIDS = <%- JSON.stringify(failDayIds) %>;

    // Calendar State
    let currentMonthDayCount;
    let previousMonthDayCount;
    let nextMonthDayCount;
    let currentMonthDaysArray;
    let previousMonthDaysArray;
    let nextMonthDaysArray;
    let firstWeekdayOfMonth;
    let lastWeekdayOfMonth;
    let previousMonthDaysDisplayed;
    let nextMonthDaysDisplayed;

    // Cached Elements
    const calendarElement = document.getElementById('calendar');
    const daysOfWeekElement = document.getElementById('days-of-week');

    // Event Listeners

    // Helper Functions
    function createDayDivs(day) {
      const dayElement = document.createElement('div');
      dayElement.classList.add('grid-panel');
      dayElement.id = `${INITIAL_YEAR}-${day.date}`;
      dayElement.innerText = day.date;
      calendarElement.appendChild(dayElement);
    }

    // Functions
    init();

    function init() {
      previousMonthDayCount = <%= dayjs().subtract(1, 'month').daysInMonth() %>;
      currentMonthDayCount = <%= dayjs().daysInMonth() %>;
      nextMonthDayCount = <%= dayjs().add(1, 'month').daysInMonth() %>;
      currentMonthDaysArray = [];
      previousMonthDaysArray = [];
      nextMonthDaysArray = [];
      firstWeekdayOfMonth = <%= dayjs(`${year}-${month}-01`).weekday() %>;
      lastWeekdayOfMonth = <%= dayjs(`${year}-${month}-${daysInMonth}`).weekday() %>;
      previousMonthDaysDisplayed = firstWeekdayOfMonth - 1;
      nextMonthDaysDisplayed = 7 - lastWeekdayOfMonth;
      render();
    }

    function render() {
      renderWeekdayLabels();
      renderPreviousMonthCalendarDays();
      renderCurrentMonthCalendarDays();
      renderNextMonthCalendarDays();
      renderCalendarDayStyles();
    }

    function renderWeekdayLabels() {
      WEEKDAYS.forEach(day => {
        const weekDayElement = document.createElement('li');
        daysOfWeekElement.appendChild(weekDayElement);
        weekDayElement.innerText = day;
      });
    }

    function renderPreviousMonthCalendarDays() {
      previousMonthDaysArray = [...Array(previousMonthDaysDisplayed)].map((day, index) => {
        return {
          dayOfMonth: previousMonthDayCount - index,
          date: `${PRIOR_MONTH}-${previousMonthDayCount - index}`,
          isCurrentMonth: false
        }
      });
      previousMonthDaysArray.reverse().forEach(day => createDayDivs(day));
    }
    
    function renderCurrentMonthCalendarDays() {
      currentMonthDaysArray = [...Array(currentMonthDayCount)].map((day, index) => {
        return {
          dayOfMonth: index + 1,
          date: `${INITIAL_MONTH}-${index + 1}`,
          isCurrentMonth: true,
        }
      });
      currentMonthDaysArray.forEach(day => createDayDivs(day));
    }

    function renderNextMonthCalendarDays() {
      nextMonthDaysArray = [...Array(nextMonthDaysDisplayed)].map((day, index) => {
        return {
          dayOfMonth: index + 1,
          date: `${NEXT_MONTH}-${index + 1}`,
          isCurrentMonth: false
        }
      });
      nextMonthDaysArray.forEach(day => createDayDivs(day));
    }

    function renderCalendarDayStyles() {
      SUCCESSIDS.forEach(day => {
        const dayDiv = document.getElementById(day);
        dayDiv.style.backgroundColor = 'limegreen';
      });

      FAILIDS.forEach(day => {
        const dayDiv = document.getElementById(day);
        dayDiv.style.backgroundColor = 'lightcoral';
      });

      // const allCalendarDays = [...this.previousMonthDaysArray, ...this.currentMonthDaysArray, ...this.nextMonthDaysArray];
    }
  </script>
  <%- include('../partials/footer')%>